import CommentBlock from '@/components/blocks/CommentBlock.vue';

export default {
  component: CommentBlock,
  title: 'Components/CommentBlock',
};

const Template = (args, { argTypes }) => ({
  components: { CommentBlock },
  props: Object.keys(argTypes),
  template: '<CommentBlock v-bind="$props" v-on="$props" />',
});

export const ExampleComment = Template.bind({});
ExampleComment.args = {
  comment: {"type_of":"comment","id_code":"1gd4o","created_at":"2021-07-19T06:55:08Z","body_html":"\u003cp\u003enice post! after login you should use router.replace not router.push because if you hit the back button after login you will go back to the login form if you are using push, also in the backend you dont need body-parser anymore, bcryptjs is nice if you dont want dependencies but bcrypt is the way to go for optimal performance, positive note: i have never seen anyone set the access control allow origin headers directly in an express middleware, most examples use the cors module, it didnt occur to me :) you keep learning something new everyday i guess. Another solid suggestion from my end would be to use a relational database for this since the structure of a user (email, password, name) remains the same for each record (it seems in your application that way) you could use the native pg module which requires you to manage connections manually or you could use pg-promise which is very similar to mongoose for postgres database\u003c/p\u003e\n\n","user":{"name":"slidenerd","username":"slidenerd","twitter_username":null,"github_username":"slidenerd","website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--Sj1u0w3r--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/171707/9858786d-57de-43cb-93ef-4192ecbfa289.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--Sbu9CdCM--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/171707/9858786d-57de-43cb-93ef-4192ecbfa289.png"},"children":[{"type_of":"comment","id_code":"1gdfd","created_at":"2021-07-19T16:29:53Z","body_html":"\u003cp\u003ehi, thanks for your good suggestions yeah these days I'm usually using Postgres in my apps, but I just wanted  this dummy app would be  as easy as it can because almost every Node developer has worked with MongoDB and Mongoose once\u003cbr\u003e\nand yeah core package is a really good package, and actually, I should use it in my future apps. \u003cbr\u003e\nand of course router.replace() also would be better way \u003cbr\u003e\nThanks for all your goodness, take care of them and also yourself :)\u003c/p\u003e\n\n","user":{"name":"MohammadAli Khaksar","username":"mohammadali0120","twitter_username":null,"github_username":"mohammadali0120","website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--OYNv0imd--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/615675/6a97cdcd-015b-4295-b75f-651e625876e8.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--oBAG0cFU--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/615675/6a97cdcd-015b-4295-b75f-651e625876e8.png"},"children":[{"type_of":"comment","id_code":"1gdm2","created_at":"2021-07-20T04:04:54Z","body_html":"\u003cp\u003ei am a fullstack developer and i had a lot of trouble in this section due to lack of documentation or examples anywhere on how to use nuxt auth on both the frontend and backend. I really appreciate your effort in putting this up. If it isnt too much to ask, can you please add a part 2 where you add Facebook or Twitter login using nuxt-auth in addition to email password and also use postgres. Super appreciate in advance\u003c/p\u003e\n\n","user":{"name":"slidenerd","username":"slidenerd","twitter_username":null,"github_username":"slidenerd","website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--Sj1u0w3r--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/171707/9858786d-57de-43cb-93ef-4192ecbfa289.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--Sbu9CdCM--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/171707/9858786d-57de-43cb-93ef-4192ecbfa289.png"},"children":[{"type_of":"comment","id_code":"1ge1e","created_at":"2021-07-20T10:15:05Z","body_html":"\u003cp\u003ehi, as you say this module does not have many examples or documentation and I actually have no plan to write about Facebook or Google and some stuff like that for authentication\u003cbr\u003e\nsorry about this, really I don't have time for getting stuck more on this matter \u003cbr\u003e\nbut I introduce to you some examples that might help you.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://codesandbox.io/s/kdwxq?file=/nuxt.config.js\" rel=\"nofollow\"\u003ecodesandbox.io/s/kdwxq?file=/nuxt....\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://codesandbox.io/s/45icg?file=/nuxt.config.js\" rel=\"nofollow\"\u003ecodesandbox.io/s/45icg?file=/nuxt....\u003c/a\u003e\u003c/p\u003e\n\n","user":{"name":"MohammadAli Khaksar","username":"mohammadali0120","twitter_username":null,"github_username":"mohammadali0120","website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--OYNv0imd--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/615675/6a97cdcd-015b-4295-b75f-651e625876e8.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--oBAG0cFU--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/615675/6a97cdcd-015b-4295-b75f-651e625876e8.png"},"children":[]}]}]}]}
};

